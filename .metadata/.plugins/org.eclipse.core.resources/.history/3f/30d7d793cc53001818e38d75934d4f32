package hr.fer.zemris.java.fractals;

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import hr.fer.zemris.java.fractals.viewer.FractalViewer;
import hr.fer.zemris.java.fractals.viewer.IFractalProducer;
import hr.fer.zemris.java.fractals.viewer.IFractalResultObserver;
import hr.fer.zemris.math.Complex;
import hr.fer.zemris.math.ComplexPolynomial;
import hr.fer.zemris.math.ComplexRootedPolynomial;

/**
 * Main program which takes the user's input, calculates a fractal and displays
 * it in the graphic unit interface, called fractal viewer.
 * 
 * @author Blaz Bagic
 * @version 1.0
 */
public class Newton {

  /** When a user enters this string, the input is closed. */
  private static final String END_OF_INPUT = "done";

  /**
   * Main method which asks the user to enter polynomial roots and then it
   * displays the calculated fractal in the fractal viewer.
   * 
   * @param args
   *          command line arguments, unused here
   */
  public static void main(String[] args) {
    System.out.println("Welcome to Newton-Raphson iteration-based fractal viewer.");
    System.out.println("Please enter at least two roots, one root per line. Enter '" + END_OF_INPUT
        + "' when done.");
    List<Complex> roots = new ArrayList<>();
    Scanner sc = new Scanner(System.in);
    int index = 1;
    do {
      System.out.print("Root " + index + "> ");
      String input = sc.nextLine();
      if (input.toLowerCase().equals(END_OF_INPUT)) {
        if (roots.size() < 2) {
          System.out
              .println("You must enter at least two roots for the computation to take effect.");
          continue;
        }
        break;
      }
      Complex root = null;
      try {
        root = parseInput(input);
      } catch (IllegalArgumentException ex) {
        System.out.println("Input line doesn't match the supported format of complex numbers."
            + " Please try again.");
        continue;
      }
      roots.add(root);
      index++;
    } while (true);

    ComplexRootedPolynomial polynomial = new ComplexRootedPolynomial((Complex[]) roots.toArray());
    FractalViewer.show(new FractalProducerImpl(polynomial));
    Complex numerator = polynomial.apply(zn);
    Complex denominator = derived.apply(zn);
    Complex fraction = numerator.divide(denominator);
    Complex zn1 = zn.sub(fraction);
    module = zn1.sub(zn).module();
    zn = zn1;
    System.out.println("Image of fractal will appear shortly. Thank you.");
    sc.close();
  }

  /**
   * Auxiliary method which parses user's input for a complex number.
   * 
   * @param line
   *          one line of user input
   * @return a {@link Complex} number based on the line of input
   * @throws IllegalArgumentException
   *           in case of invalid input
   */
  private static Complex parseInput(String line) {
    String realRegex = "(-?[0-9]+(?:[,.][0-9]+)?).*";
    Pattern pattern = Pattern.compile(realRegex);
    Matcher matcher = pattern.matcher(line.trim());
    String real = matcher.matches() ? matcher.group(1).replace(',', '.') : null;
    String imagRegex = ".*([+,-]?\\s*i(?:[0-9]+(?:[.,][0-9]*)?)?)";
    pattern = Pattern.compile(imagRegex);
    matcher = pattern.matcher(line.trim());
    String imag = matcher.matches() ? matcher.group(1).replace(',', '.').replace("i", "") : null;
    if (imag != null && imag.equals("")) {
      imag = "1";
    }

    if (real != null && imag != null) {
      return new Complex(Double.parseDouble(real), Double.parseDouble(imag));
    } else if (real != null) {
      return new Complex(Double.parseDouble(real), 0);
    } else if (imag != null) {
      return new Complex(0, Double.parseDouble(imag));
    } else {
      throw new IllegalArgumentException("Error occured due to bad input.");
    }
  }

  public static class FractalProducerImpl implements IFractalProducer {

    private ComplexRootedPolynomial polynomial;
    private ExecutorService pool;

    public FractalProducerImpl(ComplexRootedPolynomial polynomial) {
      this.polynomial = polynomial;
      this.pool = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors(),
          (job) -> {
            Thread t = new Thread(job);
            t.setDaemon(true);
            return t;
          });
    }

    @Override
    public void produce(double realMin, double realMax, double imagMin, double imagMax, int height,
        int width, long requestNumber, IFractalResultObserver observer) {

      int numberOfThreads = 8 * Runtime.getRuntime().availableProcessors();

      pool.shutdown();
    }
  }

}
